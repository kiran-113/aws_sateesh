name: AWS Terraform Workflow

on:
  push:
    branches: ["main", "tf"]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (apply or destroy)'
        required: true
        type: choice
        options:
          - apply
          - destroy

env:
  BUCKET_NAME: "githubsample-645373"
  AWS_REGION: "ap-south-1"

permissions:
  id-token: write
  contents: read

jobs:
  terraform-init:
    name: Terraform Init Stage
    runs-on: ubuntu-latest

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
        with:
          ref: tf 

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::666562444707:role/new_oidc_github
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

  terraform-plan:
    name: Terraform Plan Stage
    runs-on: ubuntu-latest
    needs: terraform-init

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
        with:
          ref: tf 

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::666562444707:role/new_oidc_github
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Plan (Debug)
        run: |
          terraform init
          terraform providers # Show provider versions
          terraform plan -no-color # Plan without color for better logs
          terraform plan -out=tfplan

      - name: Upload Terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan 

      - name: Upload Terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

  terraform-apply-destroy:
    name: Terraform Apply or Destroy Stage
    runs-on: ubuntu-latest
    needs: terraform-plan
    # Remove 'if' condition here to always run after 'terraform-plan'

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
        with:
          ref: tf 

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::666562444707:role/new_oidc_github
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .
      - name: Terraform Apply or Destroy
        run: |
          echo "Action input: ${{ github.event.inputs.action }}"
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform apply -auto-approve tfplan
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform destroy -auto-approve
          else
            echo "Invalid action. Choose 'apply' or 'destroy'."
            exit 1 
          fi
  deploy:  # Deploy Stage (runs only if 'apply' is selected)
    name: Deploy Stage
    runs-on: ubuntu-latest
    needs: terraform-apply-destroy
    if: ${{ github.event.inputs.action == 'apply' }}  # Conditional for 'apply'

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
        with:
          ref: tf

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::666562444707:role/new_oidc_github
          aws-region: ${{ env.AWS_REGION }}

      - name: Copy index.html to S3
        run: |
          aws s3 cp ./index.html s3://${{ env.BUCKET_NAME }}/ --acl public-read

# name: AWS Terraform Workflow

# on:
#   push:
#     branches: [ "main", "tf" ]

# env:
#   BUCKET_NAME: "githubsample-645373"
#   AWS_REGION: "ap-south-1"

# permissions:
#   id-token: write
#   contents: read
#   actions: write

# jobs:
#   terraform-init:
#     name: Terraform Init Stage
#     runs-on: ubuntu-latest

#     steps:
#       - name: Git clone the repository
#         uses: actions/checkout@v3

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: arn:aws:iam::666562444707:role/new_oidc_github
#           audience: sts.amazonaws.com
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Download Terraform modules
#         run: terraform init

#   terraform-plan:
#     name: Terraform Plan Stage
#     runs-on: ubuntu-latest
#     needs: terraform-init

#     steps:
#       - name: Git clone the repository
#         uses: actions/checkout@v3

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: arn:aws:iam::666562444707:role/new_oidc_github
#           audience: sts.amazonaws.com
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Download Terraform modules
#         run: terraform init

#       - name: Terraform Plan
#         run: terraform plan -out=tfplan

#       - name: Upload Terraform plan
#         uses: actions/upload-artifact@v3
#         with:
#           name: tfplan
#           path: tfplan

#   terraform-apply:
#     name: Terraform Apply Stage
#     runs-on: ubuntu-latest
#     needs: terraform-plan

#     steps:
#       - name: Git clone the repository
#         uses: actions/checkout@v3

#       - name: Set up Terraform
#         uses: hashicorp/setup-terraform@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: arn:aws:iam::666562444707:role/new_oidc_github
#           audience: sts.amazonaws.com
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Download Terraform plan
#         uses: actions/download-artifact@v3
#         with:
#           name: tfplan
#           path: .

#       - name: Download Terraform modules
#         run: terraform init

#       - name: Terraform Apply
#         run: terraform apply -auto-approve tfplan

#   deploy:
#     name: Deploy Stage
#     runs-on: ubuntu-latest
#     needs: terraform-apply

#     steps:
#       - name: Git clone the repository
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           role-to-assume: arn:aws:iam::666562444707:role/new_oidc_github
#           audience: sts.amazonaws.com
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Copy index.html to S3
#         run: |
#           aws s3 cp ./index.html s3://${{ env.BUCKET_NAME }}/ --acl public-read